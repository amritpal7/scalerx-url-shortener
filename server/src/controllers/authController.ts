import { User } from "../generated";
import { generateJwtCode, verifyJwtCode } from "../utils/jwt";
import bcrypt from "bcryptjs";
import { Request, Response } from "express";
import {
  createUser,
  getUserById,
  getUserByEmail,
} from "../service/user.service";

export const registerUserHandler = async (
  request: Request,
  response: Response
) => {
  const { email, password, username, confirmPassword } = request.body;

  if (!email || !password || !confirmPassword) {
    return response.status(400).json({ msg: "All entries are required!" });
  }

  if (password !== confirmPassword)
    return response.status(400).json({ msg: "Passwords don't match!" });

  const userExists = await getUserByEmail(email);
  // console.log("User exists:", userExists);
  if (userExists)
    return response.status(400).json({ msg: "User already exists" });

  const userData: User = {
    id: "", // This will be generated by the database
    email,
    password,
    username,
    image: null,
    isAdmin: false,
  };
  const user = await createUser(userData);
  const token = generateJwtCode(user);
  // store token in cookie
  response.cookie("accessToken", token.accessToken, {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "strict",
    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
  });
  response.cookie("refreshToken", token.refreshToken, {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "strict",
    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
  });

  return response.status(201).json({ msg: "user created successfully", user });
};

export const loginHandler = async (req: Request, res: Response) => {
  const { email, password, username } = req.body;

  if (!email || !password) {
    return res.status(400).json({ msg: "Please provide email or password" });
  }

  const user = await getUserByEmail(email);
  if (!user) {
    return res.status(400).json({ msg: "User not found" });
  }

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) {
    return res.status(400).json({ msg: "Incorrect password!" });
  }

  const token = generateJwtCode(user);

  // store token in cookie
  res.cookie("refreshToken", token.refreshToken, {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "strict",
    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
  });
  // store token in cookie
  res.cookie("accessToken", token.accessToken, {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "strict",
    maxAge: 1 * 60 * 1000, // 5 min
  });

  res.status(200).json({ msg: "Login successfull", user, token });
};

export const getUserHandler = async (req: Request, res: Response) => {
  const userId = req.user?.id;
  // console.log("get user id: ", userId); // working

  if (!userId) {
    return res.status(401).json({ msg: "Unauthorised: User not logged in!" });
  }
  const user = await getUserById(userId);
  // console.log("user: ", user); // working
  if (!user) {
    return res.status(404).json({ msg: "User not found!" });
  }

  res.status(200).json({ user });
};

export const logoutHandler = async (req: Request, res: Response) => {
  // const token = req.cookies.token;
  // if (!token) return res.status(400).json({ msg: "No cookie token found!" });
  try {
    res.clearCookie("accessToken", {
      httpOnly: true,
      sameSite: "strict",
      secure: process.env.NODE_ENV === "production",
    });
    res.clearCookie("refreshToken", {
      httpOnly: true,
      sameSite: "strict",
      secure: process.env.NODE_ENV === "production",
    });
  } catch (err) {
    res.status(400).json({ msg: "Error logging out!" });
  }

  res.status(200).json({ msg: "Logout successfully" });
};

export const refreshTokenHandler = async (req: Request, res: Response) => {
  const { refreshToken } = req.cookies;
  console.log("refreshToken", refreshToken);
  // console.log("access:", accessToken);
  if (!refreshToken)
    return res.status(401).json({ msg: "Session expired, login again!" });

  try {
    const verified = verifyJwtCode(refreshToken, "refresh");
    console.log("from refresh route: ", verified);

    if (!verified) return res.status(400).send("User was not verified!");

    const token = generateJwtCode(verified as User);

    console.log("access token from refresh route: ", token.accessToken);
    console.log("refresh token from refresh route: ", token.refreshToken);

    res.cookie("refreshToken", token.refreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
    });

    res.cookie("accessToken", token.accessToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      maxAge: 1 * 16 * 1000, // 5 min
    });

    res.status(200).json({
      msg: "Token refreshed",
      refresh: token.refreshToken,
      access: token.accessToken,
    });
  } catch (e) {
    res.clearCookie("refreshToken");
    res.clearCookie("accessToken");
    res.status(403).json({ error: "Invalid or expired token!" });
  }
};

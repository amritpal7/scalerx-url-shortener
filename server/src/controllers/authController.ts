import { User } from "../generated";
import { generateJwtCode, verifyJwtCode } from "../utils/jwt";
import bcrypt from "bcryptjs";
import { Request, Response } from "express";
import { omit, without } from "lodash";
import {
  createUser,
  getUserById,
  getUserByEmail,
  deleteUser,
  getAllUsers,
  updateUserCredential,
  comparePassword,
} from "../service/user.service";
import { redisClient } from "../lib/redis";
import prisma from "lib/prisma";

export const registerUserHandler = async (
  request: Request,
  response: Response
) => {
  const { email, password, username, confirmPassword } = request.body;

  if (!email || !password || !confirmPassword) {
    return response.status(400).json({ msg: "All entries are required!" });
  }

  if (password !== confirmPassword)
    return response.status(400).json({ msg: "Passwords don't match!" });

  const userExists = await getUserByEmail(email);
  // console.log("User exists:", userExists);
  if (userExists)
    return response.status(400).json({ msg: "User already exists" });

  const userData: User = {
    id: "", // This will be generated by the database
    email,
    password,
    username,
    isDeleted: false,
    image: null,
    isAdmin: false,
  };
  const user = await createUser(userData);
  const token = generateJwtCode(user);
  // store token in cookie
  response.cookie("accessToken", token.accessToken, {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "strict",
    maxAge: 15 * 60 * 60 * 1000, // 15 mins
  });
  response.cookie("refreshToken", token.refreshToken, {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "strict",
    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
  });

  return response.send(omit(user, "password", "isAdmin", "isDeleted"));
};

export const loginHandler = async (req: Request, res: Response) => {
  try {
    const { email, password, username } = req.body;
    if (!email || !password) {
      return res
        .status(400)
        .json({ msg: "Please provide user's credentials." });
    }

    const user = await getUserByEmail(email);

    // console.log("user:", user);
    if (!user) {
      return res.status(401).json({ msg: "User not found" });
    }

    const isMatch = await comparePassword(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ msg: "Incorrect password!" });
    }

    const token = generateJwtCode(user);

    // store token in cookie
    res.cookie("refreshToken", token.refreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
    });
    // store token in cookie
    res.cookie("accessToken", token.accessToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      maxAge: 15 * 60 * 1000, // 15 mins
    });

    res.send(omit(user, "password", "isAdmin", "isDeleted"));
  } catch (e: any) {
    res.status(400).json({ msg: e.message });
  }
};

export const getUserHandler = async (req: Request, res: Response) => {
  const userId = req.user?.id;
  // console.log("get user id: ", userId); // working

  if (!userId) {
    return res.status(401).json({ msg: "Unauthorised: User not logged in!" });
  }
  const user = await getUserById(userId);
  // console.log("user: ", user); // working
  if (!user) {
    return res.status(404).json({ msg: "User not found!" });
  }

  res.send(omit(user, "password", "isAdmin", "isDeleted"));
};

export const getAllUsersHandler = async (req: Request, res: Response) => {
  try {
    const users = await getAllUsers();

    if (!users) res.status(404).json({ msg: "Users not found." });
    // console.log("from handler", users);

    res.send(users.map(user => omit(user, "password")));
  } catch (e: any) {
    res.status(400).json({ msg: "Error fetching users data", e });
  }
};

export const logoutHandler = async (req: Request, res: Response) => {
  // const token = req.cookies.token;
  // if (!token) return res.status(400).json({ msg: "No cookie token found!" });
  try {
    res.clearCookie("accessToken", {
      httpOnly: true,
      sameSite: "strict",
      secure: process.env.NODE_ENV === "production",
    });
    res.clearCookie("refreshToken", {
      httpOnly: true,
      sameSite: "strict",
      secure: process.env.NODE_ENV === "production",
    });
  } catch (err) {
    res.status(400).json({ msg: "Error logging out!" });
  }

  res.status(200).json({ msg: "Logout successfully" });
};

export const updateUserCredentialsHandler = async (
  req: Request,
  res: Response
) => {
  const userId = req.user?.id;

  // console.log("from update cred", userId); // working

  if (!userId) res.status(404).json({ msg: "User not authorized." });

  if (!req.body)
    return res
      .status(400)
      .json({ msg: "Please provide entries for updating the credentials." });

  try {
    const updatedUser = await updateUserCredential(userId, req.body);
    res.send(omit(updatedUser, "password", "isAdmin", "isDeleted"));
  } catch (err: any) {
    res.status(400).json({ msg: err.message });
  }
};

export const deleteUserHandler = async (req: Request, res: Response) => {
  // get user id from the body
  const userId = req.user?.id;

  // log("from delete", userId);

  if (!userId) return res.status(401).send({ msg: "user not found." });

  try {
    const deleted = await deleteUser(userId);

    if (!deleted) return res.status(404).json({ msg: "User not exists." });

    redisClient.del(`shortUrls:${userId}`);
    res.clearCookie("accessToken");
    res.clearCookie("refreshToken");

    return res.status(201).json({ msg: "user deleted." });
  } catch (e) {
    res.status(400).json({ msg: "account deletion unsuccessfull." });
  }

  // match password and allow write an update
};

export const refreshTokenHandler = async (req: Request, res: Response) => {
  const { refreshToken } = req.cookies;
  // console.log("refreshToken", refreshToken);
  // console.log("access:", accessToken);
  if (!refreshToken)
    return res.status(401).json({ msg: "Session expired, login again!" });

  try {
    const verified = verifyJwtCode(refreshToken, "refresh");
    // console.log("from refresh route: ", verified);

    if (!verified) return res.status(400).send("User was not verified!");

    const token = generateJwtCode(verified as User);

    // console.log("access token from refresh route: ", token.accessToken);
    // console.log("refresh token from refresh route: ", token.refreshToken);

    res.cookie("refreshToken", token.refreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
    });

    res.cookie("accessToken", token.accessToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      maxAge: 15 * 60 * 1000, // 15 mins
    });

    res.send(token);
  } catch (e) {
    res.clearCookie("refreshToken");
    res.clearCookie("accessToken");
    res.status(403).json({ error: "Invalid or expired token!" });
  }
};

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "linux-musl-arm64-openssl-3.0.x"]
  output        = "../generated"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ShortUrl {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  shortCode String   @unique
  shortUrl  String   @unique
  longUrl   String
  clicks    Int      @default(0)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
}

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  username   String     @unique @db.String
  maidenName String?
  age        Int?
  gender     String?
  phone      String?
  birthDate  String?
  bloodGroup String?
  height     Float?
  weight     Float?
  eyeColor   String?
  ip         String?
  macAddress String?
  university String?
  bank       Bank?
  company    Company?
  email      String?    @unique
  image      String?
  isAdmin    Boolean    @default(false)
  isVerified Boolean    @default(false)
  password   String
  urls       ShortUrl[]
  address    Address?
  isDeleted  Boolean    @default(false)
  Session    Session[]
  createdAt  DateTime   @default(now())
}

type Address {
  id          String
  userId      String
  address     String
  city        String
  state       String
  stateCode   String
  postalCode  String
  coordinates UserCoordinates?
  country     String
  zipcode     String
}

type UserCoordinates {
  lat Float
  lng Float
}

model Bank {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @unique @db.ObjectId
  cardExpire String
  cardNumber String
  cardType   String
  currency   String
  iban       String
  user       User   @relation(fields: [userId], references: [id])
}

type Company {
  department String
  name       String
  title      String
  address    CompanyAddress?
}

type CompanyAddress {
  address     String
  city        String
  state       String
  country     String
  zipcode     String
  stateCode   String
  postalCode  String
  coordinates CompanyCoordinates?
}

type CompanyCoordinates {
  lat Float
  lng Float
}

model Session {
  id        String   @id @default(uuid()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  userAgent String
  valid     Boolean  @default(true)
  createdAt DateTime @default(now())
}
